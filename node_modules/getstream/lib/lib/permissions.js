var StreamPermissions = function StreamPermissions() {
  this.initialize.apply(this, arguments);
};

StreamPermissions.prototype = {
  initialize: function initialize(client, token) {
    /**
     * Initialize a feed object
     * @method intialize
     * @memberof StreamPermissions.prototype
     * @param {StreamCloudClient} client Stream client this collection is constructed from
     * @param {string} name ObjectStore name
     * @param {string} token JWT token
     * @example new StreamPermissions(client, "food", "eyJhbGciOiJIUzI1...")
     */
    this.client = client;
    this.token = token;
  },
  buildURL: function buildURL(itemId) {
    var url = 'permissions/';

    if (itemId === undefined) {
      return url;
    }

    return url + itemId + '/';
  },
  get: function get(callback) {
    /**
     * Get the list of policies
     * @method get
     * @memberof StreamPermissions.prototype
     * @param  {requestCallback} callback Callback to call on completion
     * @return {Promise} Promise object
     * @example permissions.get()
     */
    return this.client.get({
      url: this.buildURL(),
      signature: this.token
    }, callback);
  },
  add: function add(body, callback) {
    /**
     * Add a policy
     * @method add
     * @memberof StreamPermissions.prototype
     * @param  {object}   body  The json describing the policy
     * @param  {requestCallback} callback Callback to call on completion
     * @return {Promise} Promise object
     * @example permissions.add({"priority": "80", "resources": ['ReadFeed'], action: 1})
     */
    return this.client.post({
      url: this.buildURL(),
      body: body,
      signature: this.token
    }, callback);
  },
  delete: function _delete(priority, callback) {
    /**
     * Delete a policy
     * @method delete
     * @memberof StreamPermissions.prototype
     * @param  {object}   priority  The priority of the policy that should be deleted
     * @param  {requestCallback} callback Callback to call on completion
     * @return {Promise} Promise object
     * @example collection.delete("cheese101")
     */
    return this.client['delete']({
      url: this.buildURL(priority),
      signature: this.token
    }, callback);
  }
};
module.exports = StreamPermissions;